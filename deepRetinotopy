#!/usr/bin/env bash
exec > >(tee -a ~/deepRetinotopy_output.log)
exec 2> >(tee -a ~/deepRetinotopy_error.log >&2)

# Auto-detect number of cores (leave 1 core free)
auto_cores=$(($(nproc) - 1))
[ $auto_cores -lt 1 ] && auto_cores=1  # Ensure at least 1 core

# Default values
n_jobs=$auto_cores
subject_id=""
fast='yes'

while getopts s:t:d:m:g:j:i: flag
do
    case "${flag}" in
        s) dirSubs=$(realpath "${OPTARG}");;
        t) dirHCP=$(realpath "${OPTARG}");;
        d) datasetName=${OPTARG};;
        m) IFS=',' read -ra maps <<< "${OPTARG}";;
        g) fast=${OPTARG};
            case "$fast" in
                'yes'|'no') ;;
                *) echo "Invalid fast argument: $fast"; exit 1;;
            esac;;
        j) n_jobs=${OPTARG};;
        i) subject_id=${OPTARG};;
        ?)
            echo "script usage: $(basename "$0") [-s path to subs] [-t path to HCP surfaces] [-d name of the dataset] [-m list of maps] [-g fast generation of midthickness surface] [-j number of cores for parallelization] [-i subject ID for single subject processing]" >&2
            exit 1
        esac
done

# Check if realpath failed
if [ ! -d "$dirSubs" ]; then
    echo "Error: Path to FreeSurfer directory ($dirSubs) does not exist."
    exit 1
fi

if [ ! -d "$dirHCP" ]; then
    echo "Error: Path to HCP surfaces directory ($dirHCP) does not exist."
    exit 1
fi

# Validate n_jobs
if ! [[ "$n_jobs" =~ ^[0-9]+$ ]] || [ "$n_jobs" -lt 1 ]; then
    echo "Error: Invalid number of jobs ($n_jobs). Must be a positive integer."
    exit 1
fi

# Check if processing single subject or multiple subjects
if [ -n "$subject_id" ]; then
    echo "Processing single subject: $subject_id"
    # Validate subject directory exists
    if [ ! -d "$dirSubs/$subject_id" ]; then
        echo "Error: Subject directory '$subject_id' not found in $dirSubs"
        exit 1
    fi
else
    echo "Using $n_jobs parallel jobs for multiple subjects"
fi

# create a print box
echo "--------------------------------------------------------------------------------"
echo "DeepRetinotopy: retinotopic mapping using deep learning"
echo "--------------------------------------------------------------------------------"
echo "Directories and parameters:"
echo 
echo "Path to FreeSurfer directory: $dirSubs";
echo "Path to fs_LR-deformed_to-fsaverage template surfaces: $dirHCP";
echo "Dataset name: $datasetName";
echo "Maps: ${maps[@]}";
if [ -n "$subject_id" ]; then
    echo "Processing mode: Single subject ($subject_id)";
else
    echo "Processing mode: All subjects (parallel jobs: $n_jobs)";
fi
echo "Fast midthickness generation: $fast";
echo "--------------------------------------------------------------------------------"

if [ -d "$dirSubs" ] && [ -d "$dirHCP" ]; then
    # check if template surfaces are available
    if [ ! -f "$dirHCP/fs_LR-deformed_to-fsaverage.R.sphere.32k_fs_LR.surf.gii" ] && [ ! -f "$dirHCP/fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.gii" ]; then
        echo "[Error]: Files $dirHCP/fs_LR-deformed_to-fsaverage.R.sphere.32k_fs_LR.surf.gii 
        and/or $dirHCP/fs_LR-deformed_to-fsaverage.L.sphere.32k_fs_LR.surf.gii do not exist!"
        exit 1
    else
        for hemisphere in 'lh' 'rh';
        do 
            if [ $hemisphere == 'lh' ]; then
                echo "Generating retinotopic maps for the left hemisphere"
            else
                echo "Generating retinotopic maps for the right hemisphere"
            fi
            echo "--------------------------------------------------------------------------------"
            echo "[Step 1] Generating mid-thickness surface and curvature data..."
            
            # Pass subject_id flag to step 1 if provided
            if [ -n "$subject_id" ]; then
                1_native2fsaverage.sh -s $dirSubs -t $dirHCP -h $hemisphere -g $fast -j 1 -i $subject_id
            else
                1_native2fsaverage.sh -s $dirSubs -t $dirHCP -h $hemisphere -g $fast -j $n_jobs
            fi

            if [ $? -eq 1 ]; then
                echo "Error in Step 1: Please check surface files."
                exit 1
            else
                for map in "${maps[@]}";
                do
                    echo "--------------------------------------------------------------------------------"
                    echo "Map: $map"
                    echo "--------------------------------------------------------------------------------"
                    echo "[Step 2] Retinotopy prediction..."
                    
                    # Pass subject_id flag to step 2 if provided
                    if [ -n "$subject_id" ]; then
                        2_inference.py --path $dirSubs --dataset $datasetName --prediction_type $map --hemisphere $hemisphere --subject_id $subject_id
                    else
                        2_inference.py --path $dirSubs --dataset $datasetName --prediction_type $map --hemisphere $hemisphere
                    fi
                    
                    if [ $? -eq 1 ]; then
                        rm -r $dirSubs/processed
                        echo "Error in Step 2: Please check if model path is correct."
                        exit 1
                    fi

                    rm -r $dirSubs/processed

                    echo "--------------------------------------------------------------------------------"
                    echo "[Step 3] Resampling predictions to native space..."
                    
                    # Pass subject_id flag to step 3 if provided
                    if [ -n "$subject_id" ]; then
                        3_fsaverage2native.sh -s $dirSubs -t $dirHCP -h $hemisphere -r $map -m model -j 1 -i $subject_id
                    else
                        3_fsaverage2native.sh -s $dirSubs -t $dirHCP -h $hemisphere -r $map -m model -j $n_jobs
                    fi
                    
                    if [ $? -eq 1 ]; then
                        echo "Error in Step 3: Please check if prediction files were appropriately generated."
                        exit 1
                    fi
                    
                    echo "$map predictions resampling for $hemisphere is done!"
                    echo "--------------------------------------------------------------------------------"
                done
            fi
        done
        echo "All done!"
    fi
else
    echo "Directories do not exist! Please check the paths to the directories."
    exit 1
fi